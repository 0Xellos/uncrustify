### This file holds rules common to all c-style languages (currently C# and C++)
#newlines                                          { Auto, LF, CR, CRLF }
input_tab_size                  = 4
#output_tab_size                                   Number
#string_escape_char                                Number
#string_escape_char2                               Number
string_replace_tab_chars        = true
tok_split_gte                   = false
disable_processing_cmt          = *begin-nonstandard-formatting*
enable_processing_cmt           = *end-nonstandard-formatting*
#enable_digraphs                                   { False, True }
utf8_bom                        = remove
utf8_byte                       = false
utf8_force                      = false
indent_columns                  = 4
#indent_continue                                   Number
indent_with_tabs                = 0
indent_cmt_with_tabs            = false
indent_align_string             = false
#indent_xml_string                                 Number
#indent_brace                                      Number
indent_braces                   = false
indent_braces_no_func           = false
indent_braces_no_class          = false
indent_braces_no_struct         = false
indent_brace_parent             = false
#indent_paren_open_brace                           { False, True }
indent_cs_delegate_brace        = true
indent_namespace                = true
#indent_namespace_single_indent                    { False, True }
#indent_namespace_level                            Number
#indent_namespace_limit                            Number
indent_extern                   = false
indent_class                    = true
indent_class_colon              = false
#indent_class_on_colon                             { False, True }
#indent_constr_colon                               { False, True }
#indent_ctor_init_leading                          Number
#indent_ctor_init                                  Number
indent_else_if                  = false
#indent_var_def_blk                                Number
indent_var_def_cont             = false
#indent_shift                                      { False, True }
#indent_func_def_force_col1                        { False, True }
indent_func_call_param          = true
indent_func_def_param           = true
indent_func_proto_param         = true
indent_func_class_param         = false
indent_func_ctor_var_param      = false
indent_template_param           = false
indent_func_param_double        = false
#indent_func_const                                 Number
#indent_func_throw                                 Number
#indent_member                                     Number
#indent_sing_line_comments                         Number
indent_relative_single_line_comments = false
indent_switch_case              = 4
indent_case_shift               = 0
indent_case_brace               = 0
indent_col1_comment             = false
indent_label                    = -4
indent_access_spec              = -4
#indent_access_spec_body                           { False, True }
indent_paren_nl                 = false
#indent_paren_close                                Number
indent_comma_paren              = false
indent_bool_paren               = false
indent_first_bool_expr          = false
indent_square_nl                = false
indent_preserve_sql             = false
#indent_align_assign                               { False, True }
#indent_oc_block                                   { False, True }
#indent_oc_block_msg                               Number
#indent_oc_msg_colon                               Number
#indent_oc_msg_prioritize_first_colon              { False, True }
indent_oc_block_msg_xcode_style = true
#indent_oc_block_msg_from_keyword                  { False, True }
#indent_oc_block_msg_from_colon                    { False, True }
#indent_oc_block_msg_from_caret                    { False, True }
#indent_oc_block_msg_from_brace                    { False, True }
#indent_min_vbrace_open                            Number
#indent_vbrace_open_on_tabstop                     { False, True }
#indent_token_after_brace                          { False, True }
#indent_cpp_lambda_body                            { False, True }
#  If true, cpp lambda body will be indented.
sp_arith                        = add
sp_assign                       = add
#sp_cpp_lambda_assign                              { Ignore, Add, Remove, Force }
#sp_cpp_lambda_paren                               { Ignore, Add, Remove, Force }
sp_assign_default               = add
#sp_before_assign                                  { Ignore, Add, Remove, Force }
#sp_after_assign                                   { Ignore, Add, Remove, Force }
#sp_enum_paren                                     { Ignore, Add, Remove, Force }
sp_enum_assign                  = add
#sp_enum_before_assign                             { Ignore, Add, Remove, Force }
#sp_enum_after_assign                              { Ignore, Add, Remove, Force }
sp_pp_concat                    = remove
sp_pp_stringify                 = remove
#sp_before_pp_stringify                            { Ignore, Add, Remove, Force }
sp_bool                         = add
sp_compare                      = add
sp_inside_paren                 = remove
sp_paren_paren                  = remove
#sp_cparen_oparen                                  { Ignore, Add, Remove, Force }
sp_balance_nested_parens        = false
sp_paren_brace                  = force
#sp_before_ptr_star                                { Ignore, Add, Remove, Force }
#sp_before_unnamed_ptr_star                        { Ignore, Add, Remove, Force }
#sp_between_ptr_star                               { Ignore, Add, Remove, Force }
#sp_after_ptr_star                                 { Ignore, Add, Remove, Force }
#sp_after_ptr_star_qualifier                       { Ignore, Add, Remove, Force }
#sp_after_ptr_star_func                            { Ignore, Add, Remove, Force }
#sp_ptr_star_paren                                 { Ignore, Add, Remove, Force }
#sp_before_ptr_star_func                           { Ignore, Add, Remove, Force }
#sp_before_byref                                   { Ignore, Add, Remove, Force }
#sp_before_unnamed_byref                           { Ignore, Add, Remove, Force }
#sp_after_byref                                    { Ignore, Add, Remove, Force }
#sp_after_byref_func                               { Ignore, Add, Remove, Force }
#sp_before_byref_func                              { Ignore, Add, Remove, Force }
sp_after_type                   = ignore
#sp_before_template_paren                          { Ignore, Add, Remove, Force }
sp_template_angle               = remove
sp_before_angle                 = remove
sp_inside_angle                 = remove
#sp_after_angle                                    { Ignore, Add, Remove, Force }
sp_angle_paren                  = remove
sp_angle_paren_empty            = remove
sp_angle_word                   = add
sp_angle_shift                  = remove
#sp_permit_cpp11_shift                             { False, True }
sp_before_sparen                = force
sp_inside_sparen                = remove
#sp_inside_sparen_close                            { Ignore, Add, Remove, Force }
#sp_inside_sparen_open                             { Ignore, Add, Remove, Force }
sp_after_sparen                 = add
sp_sparen_brace                 = force
#sp_invariant_paren                                { Ignore, Add, Remove, Force }
#sp_after_invariant_paren                          { Ignore, Add, Remove, Force }
sp_special_semi                 = force
sp_before_semi                  = remove
sp_before_semi_for              = remove
sp_before_semi_for_empty        = remove
sp_after_semi                   = add
sp_after_semi_for               = force
sp_after_semi_for_empty         = remove
sp_before_square                = remove
sp_before_squares               = remove
sp_inside_square                = remove
sp_after_comma                  = add
sp_before_comma                 = ignore
sp_after_mdatype_commas         = remove
sp_before_mdatype_commas        = remove
sp_between_mdatype_commas       = remove
sp_paren_comma                  = remove
#sp_before_ellipsis                                { Ignore, Add, Remove, Force }
sp_after_class_colon            = force
sp_before_class_colon           = force
#sp_after_constr_colon                             { Ignore, Add, Remove, Force }
#sp_before_constr_colon                            { Ignore, Add, Remove, Force }
sp_before_case_colon            = remove
sp_after_operator               = remove
sp_after_operator_sym           = remove
sp_after_operator_sym_empty     = remove
sp_after_cast                   = remove
sp_inside_paren_cast            = remove
sp_cpp_cast_paren               = remove
sp_sizeof_paren                 = remove
#sp_after_tag                                      { Ignore, Add, Remove, Force }
sp_inside_braces_enum           = add
#sp_inside_braces_struct                           { Ignore, Add, Remove, Force }
#sp_inside_braces                                  { Ignore, Add, Remove, Force }
sp_inside_braces_empty          = remove
sp_type_func                    = ignore
sp_func_proto_paren             = remove
#sp_func_proto_paren_empty                         { Ignore, Add, Remove, Force }
sp_func_def_paren               = remove
#sp_func_def_paren_empty                           { Ignore, Add, Remove, Force }
sp_inside_fparens               = remove
sp_inside_fparen                = remove
#sp_inside_tparen                                  { Ignore, Add, Remove, Force }
#sp_after_tparen_close                             { Ignore, Add, Remove, Force }
#sp_square_fparen                                  { Ignore, Add, Remove, Force }
sp_fparen_brace                 = add
#sp_fparen_dbrace                                  { Ignore, Add, Remove, Force }
sp_func_call_paren              = remove
sp_func_call_paren_empty        = remove
sp_func_call_user_paren         = remove
sp_func_class_paren             = remove
#sp_func_class_paren_empty                         { Ignore, Add, Remove, Force }
sp_return_paren                 = add
#sp_attribute_paren                                { Ignore, Add, Remove, Force }
sp_defined_paren                = remove
sp_throw_paren                  = add
#sp_after_throw                                    { Ignore, Add, Remove, Force }
sp_catch_paren                  = add
#sp_version_paren                                  { Ignore, Add, Remove, Force }
#sp_scope_paren                                    { Ignore, Add, Remove, Force }
#sp_super_paren                                    { Ignore, Add, Remove, Force }
#sp_this_paren                                     { Ignore, Add, Remove, Force }
#sp_macro                                          { Ignore, Add, Remove, Force }
#sp_macro_func                                     { Ignore, Add, Remove, Force }
#sp_else_brace                                     { Ignore, Add, Remove, Force }
#sp_brace_else                                     { Ignore, Add, Remove, Force }
sp_brace_typedef                = add
#sp_catch_brace                                    { Ignore, Add, Remove, Force }
#sp_brace_catch                                    { Ignore, Add, Remove, Force }
#sp_finally_brace                                  { Ignore, Add, Remove, Force }
#sp_brace_finally                                  { Ignore, Add, Remove, Force }
#sp_try_brace                                      { Ignore, Add, Remove, Force }
sp_getset_brace                 = add
#sp_word_brace                                     { Ignore, Add, Remove, Force }
#sp_word_brace_ns                                  { Ignore, Add, Remove, Force }
#sp_before_dc                                      { Ignore, Add, Remove, Force }
#sp_after_dc                                       { Ignore, Add, Remove, Force }
#sp_d_array_colon                                  { Ignore, Add, Remove, Force }
sp_not                          = remove
sp_inv                          = remove
sp_addr                         = remove
sp_member                       = remove
sp_deref                        = remove
sp_sign                         = remove
sp_incdec                       = remove
sp_before_nl_cont               = add
sp_after_oc_scope               = force
sp_after_oc_colon               = remove
sp_before_oc_colon              = remove
sp_after_oc_dict_colon          = force
sp_before_oc_dict_colon         = remove
sp_after_send_oc_colon          = force
sp_before_send_oc_colon         = remove
sp_after_oc_type                = remove
sp_after_oc_return_type         = remove
sp_after_oc_at_sel              = remove
#sp_after_oc_at_sel_parens                         { Ignore, Add, Remove, Force }
sp_inside_oc_at_sel_parens      = remove
#sp_before_oc_block_caret                          { Ignore, Add, Remove, Force }
#sp_after_oc_block_caret                           { Ignore, Add, Remove, Force }
#sp_after_oc_msg_receiver                          { Ignore, Add, Remove, Force }
#sp_after_oc_property                              { Ignore, Add, Remove, Force }
sp_cond_colon                   = add
#sp_cond_colon_before                              { Ignore, Add, Remove, Force }
#sp_cond_colon_after                               { Ignore, Add, Remove, Force }
sp_cond_question                = add
#sp_cond_question_before                           { Ignore, Add, Remove, Force }
#sp_cond_question_after                            { Ignore, Add, Remove, Force }
#sp_cond_ternary_short                             { Ignore, Add, Remove, Force }
sp_case_label                   = ignore
#sp_range                                          { Ignore, Add, Remove, Force }
#sp_after_for_colon                                { Ignore, Add, Remove, Force }
#sp_before_for_colon                               { Ignore, Add, Remove, Force }
#sp_extern_paren                                   { Ignore, Add, Remove, Force }
#sp_cmt_cpp_start                                  { Ignore, Add, Remove, Force }
#sp_cmt_cpp_doxygen                                { False, True }
#sp_cmt_cpp_qttr                                   { False, True }
#sp_endif_cmt                                      { Ignore, Add, Remove, Force }
sp_after_new                    = force
sp_between_new_paren            = remove
#sp_before_tr_emb_cmt                              { Ignore, Add, Remove, Force }
#sp_num_before_tr_emb_cmt                          Number
#sp_annotation_paren                               { Ignore, Add, Remove, Force }
sp_skip_vbrace_tokens           = true
align_keep_tabs                 = false
align_with_tabs                 = false
align_on_tabstop                = false
align_number_right              = false
#align_keep_extra_space                            { False, True }
align_func_params               = false
align_same_func_call_params     = false
#align_var_def_span                                Number
#align_var_def_star_style                          Number
#align_var_def_amp_style                           Number
#align_var_def_thresh                              Number
#align_var_def_gap                                 Number
align_var_def_colon             = false
align_var_def_attribute         = false
align_var_def_inline            = false
#align_assign_span                                 Number
#align_assign_thresh                               Number
#align_enum_equ_span                               Number
#align_enum_equ_thresh                             Number
#align_var_struct_span                             Number
#align_var_struct_thresh                           Number
#align_var_struct_gap                              Number
#align_struct_init_span                            Number
#align_typedef_gap                                 Number
#align_typedef_span                                Number
#align_typedef_func                                Number
#align_typedef_star_style                          Number
#align_typedef_amp_style                           Number
#align_right_cmt_span                              Number
align_right_cmt_mix             = false
#align_right_cmt_gap                               Number
#align_right_cmt_at_col                            Number
#align_func_proto_span                             Number
#align_func_proto_gap                              Number
align_on_operator               = false
align_mix_var_proto             = false
align_single_line_func          = false
align_single_line_brace         = false
#align_single_line_brace_gap                       Number
#align_oc_msg_spec_span                            Number
align_nl_cont                   = false
#align_pp_define_together                          { False, True }
#align_pp_define_gap                               Number
#align_pp_define_span                              Number
align_left_shift                = false
#align_asm_colon                                   { False, True }
#align_oc_msg_colon_span                           Number
#align_oc_msg_colon_first                          { False, True }
#align_oc_decl_colon                               { False, True }
nl_collapse_empty_body          = false
nl_assign_leave_one_liners      = true
nl_class_leave_one_liners       = true
nl_enum_leave_one_liners        = true
nl_getset_leave_one_liners      = true
nl_func_leave_one_liners        = true
nl_cpp_lambda_leave_one_liners  = true
nl_if_leave_one_liners          = false
#nl_while_leave_one_liners                         { False, True }
nl_oc_msg_leave_one_liner       = true
#nl_oc_block_brace                                 { Ignore, Add, Remove, Force }
nl_start_of_file                = remove
#nl_start_of_file_min                              Number
nl_end_of_file                  = force
nl_end_of_file_min              = 1
nl_assign_brace                 = force
#nl_assign_square                                  { Ignore, Add, Remove, Force }
#nl_after_square_assign                            { Ignore, Add, Remove, Force }
#nl_func_var_def_blk                               Number
#nl_typedef_blk_start                              Number
#nl_typedef_blk_end                                Number
#nl_typedef_blk_in                                 Number
#nl_var_def_blk_start                              Number
#nl_var_def_blk_end                                Number
#nl_var_def_blk_in                                 Number
#nl_fcall_brace                                    { Ignore, Add, Remove, Force }
nl_enum_brace                   = force
nl_struct_brace                 = force
nl_union_brace                  = force
nl_if_brace                     = force
nl_brace_else                   = force
#nl_elseif_brace                                   { Ignore, Add, Remove, Force }
nl_else_brace                   = force
nl_else_if                      = remove
nl_brace_finally                = force
nl_finally_brace                = force
nl_try_brace                    = force
nl_getset_brace                 = force
nl_for_brace                    = force
nl_catch_brace                  = force
nl_brace_catch                  = force
#nl_brace_square                                   { Ignore, Add, Remove, Force }
#nl_brace_fparen                                   { Ignore, Add, Remove, Force }
nl_while_brace                  = force
#nl_scope_brace                                    { Ignore, Add, Remove, Force }
#nl_unittest_brace                                 { Ignore, Add, Remove, Force }
#nl_version_brace                                  { Ignore, Add, Remove, Force }
nl_using_brace                  = force
nl_brace_brace                  = ignore
nl_do_brace                     = force
nl_brace_while                  = force
nl_switch_brace                 = force
#nl_synchronized_brace                             { Ignore, Add, Remove, Force }
nl_multi_line_cond              = false
#nl_multi_line_define                              { False, True }
nl_before_case                  = false
#nl_before_throw                                   { Ignore, Add, Remove, Force }
nl_after_case                   = false
nl_case_colon_brace             = force
nl_namespace_brace              = force
nl_template_class               = ignore
nl_class_brace                  = force
#nl_class_init_args                                { Ignore, Add, Remove, Force }
#nl_constr_init_args                               { Ignore, Add, Remove, Force }
#nl_enum_own_lines                                 { Ignore, Add, Remove, Force }
#nl_func_type_name                                 { Ignore, Add, Remove, Force }
#nl_func_type_name_class                           { Ignore, Add, Remove, Force }
#nl_func_class_scope                               { Ignore, Add, Remove, Force }
#nl_func_scope_name                                { Ignore, Add, Remove, Force }
#nl_func_proto_type_name                           { Ignore, Add, Remove, Force }
#nl_func_paren                                     { Ignore, Add, Remove, Force }
#nl_func_def_paren                                 { Ignore, Add, Remove, Force }
#nl_func_decl_start                                { Ignore, Add, Remove, Force }
#nl_func_def_start                                 { Ignore, Add, Remove, Force }
#nl_func_decl_start_single                         { Ignore, Add, Remove, Force }
#nl_func_def_start_single                          { Ignore, Add, Remove, Force }
#nl_func_decl_start_multi_line                     { False, True }
#nl_func_def_start_multi_line                      { False, True }
#nl_func_decl_args                                 { Ignore, Add, Remove, Force }
#nl_func_def_args                                  { Ignore, Add, Remove, Force }
#nl_func_decl_args_multi_line                      { False, True }
#nl_func_def_args_multi_line                       { False, True }
#nl_func_decl_end                                  { Ignore, Add, Remove, Force }
#nl_func_def_end                                   { Ignore, Add, Remove, Force }
#nl_func_decl_end_single                           { Ignore, Add, Remove, Force }
#nl_func_def_end_single                            { Ignore, Add, Remove, Force }
#nl_func_decl_end_multi_line                       { False, True }
#nl_func_def_end_multi_line                        { False, True }
#nl_func_decl_empty                                { Ignore, Add, Remove, Force }
#nl_func_def_empty                                 { Ignore, Add, Remove, Force }
#nl_func_call_start_multi_line                     { False, True }
#nl_func_call_args_multi_line                      { False, True }
#nl_func_call_end_multi_line                       { False, True }
#nl_oc_msg_args                                    { False, True }
nl_fdef_brace                   = force
#nl_cpp_ldef_brace                                 { Ignore, Add, Remove, Force }
#nl_return_expr                                    { Ignore, Add, Remove, Force }
nl_after_semicolon              = false
#nl_paren_dbrace_open                              { Ignore, Add, Remove, Force }
nl_after_brace_open             = false
nl_after_brace_open_cmt         = false
nl_after_vbrace_open            = false
nl_after_vbrace_open_empty      = false
nl_after_brace_close            = false
nl_after_vbrace_close           = false
#nl_brace_struct_var                               { Ignore, Add, Remove, Force }
#nl_define_macro                                   { False, True }
nl_squeeze_ifdef                = false
#nl_squeeze_ifdef_top_level                        { False, True }
#nl_before_if                                      { Ignore, Add, Remove, Force }
#nl_after_if                                       { Ignore, Add, Remove, Force }
#nl_before_for                                     { Ignore, Add, Remove, Force }
#nl_after_for                                      { Ignore, Add, Remove, Force }
#nl_before_while                                   { Ignore, Add, Remove, Force }
#nl_after_while                                    { Ignore, Add, Remove, Force }
#nl_before_switch                                  { Ignore, Add, Remove, Force }
#nl_after_switch                                   { Ignore, Add, Remove, Force }
#nl_before_synchronized                            { Ignore, Add, Remove, Force }
#nl_after_synchronized                             { Ignore, Add, Remove, Force }
#nl_before_do                                      { Ignore, Add, Remove, Force }
#nl_after_do                                       { Ignore, Add, Remove, Force }
nl_ds_struct_enum_cmt           = false
nl_ds_struct_enum_close_brace   = false
#nl_before_func_class_def                          Number
#nl_before_func_class_proto                        Number
#nl_class_colon                                    { Ignore, Add, Remove, Force }
#nl_constr_colon                                   { Ignore, Add, Remove, Force }
nl_create_if_one_liner          = false
nl_create_for_one_liner         = false
nl_create_while_one_liner       = false
#nl_split_if_one_liner                             { False, True }
#nl_split_for_one_liner                            { False, True }
#nl_split_while_one_liner                          { False, True }
#pos_arith                                         { Ignore, Lead, Trail }
#pos_assign                                        { Ignore, Lead, Trail }
#pos_bool                                          { Ignore, Lead, Trail }
#pos_compare                                       { Ignore, Lead, Trail }
#pos_conditional                                   { Ignore, Lead, Trail }
#pos_comma                                         { Ignore, Lead, Trail }
#pos_enum_comma                                    { Ignore, Lead, Trail }
#pos_class_comma                                   { Ignore, Lead, Trail }
#pos_constr_comma                                  { Ignore, Lead, Trail }
#pos_class_colon                                   { Ignore, Lead, Trail }
#pos_constr_colon                                  { Ignore, Lead, Trail }
#code_width                                        Number
ls_for_split_full               = false
ls_func_split_full              = false
#ls_code_width                                     { False, True }
nl_max                          = 3
#nl_after_func_proto                               Number
#nl_after_func_proto_group                         Number
#nl_after_func_class_proto                         Number
#nl_after_func_class_proto_group                   Number
#nl_before_func_body_def                           Number
#nl_before_func_body_proto                         Number
nl_after_func_body              = 2
#nl_after_func_body_class                          Number
#nl_after_func_body_one_liner                      Number
#nl_before_block_comment                           Number
#nl_before_c_comment                               Number
#nl_before_cpp_comment                             Number
nl_after_multiline_comment      = false
#nl_after_label_colon                              { False, True }
#nl_after_struct                                   Number
#nl_after_class                                    Number
#nl_before_access_spec                             Number
#nl_after_access_spec                              Number
#nl_comment_func_def                               Number
#nl_after_try_catch_finally                        Number
#nl_around_cs_property                             Number
#nl_between_get_set                                Number
nl_property_brace               = force
eat_blanks_after_open_brace     = true
eat_blanks_before_close_brace   = true
#nl_remove_extra_newlines                          Number
#nl_before_return                                  { False, True }
nl_after_return                 = false
#nl_after_annotation                               { Ignore, Add, Remove, Force }
#nl_between_annotation                             { Ignore, Add, Remove, Force }
#mod_full_brace_do                                 { Ignore, Add, Remove, Force }
#mod_full_brace_for                                { Ignore, Add, Remove, Force }
#mod_full_brace_function                           { Ignore, Add, Remove, Force }
#mod_full_brace_if                                 { Ignore, Add, Remove, Force }
mod_full_brace_if_chain         = false
#mod_full_brace_if_chain_only                      { False, True }
#mod_full_brace_nl                                 Number
#mod_full_brace_while                              { Ignore, Add, Remove, Force }
#mod_full_brace_using                              { Ignore, Add, Remove, Force }
mod_paren_on_return             = ignore
mod_pawn_semicolon              = false
mod_full_paren_if_bool          = false
mod_remove_extra_semicolon      = true
#mod_add_long_function_closebrace_comment          Number
#mod_add_long_namespace_closebrace_comment         Number
#mod_add_long_switch_closebrace_comment            Number
#mod_add_long_ifdef_endif_comment                  Number
#mod_add_long_ifdef_else_comment                   Number
#mod_sort_import                                   { False, True }
#mod_sort_using                                    { False, True }
#mod_sort_include                                  { False, True }
mod_move_case_break             = false
#mod_case_brace                                    { Ignore, Add, Remove, Force }
mod_remove_empty_return         = true
#cmt_width                                         Number
#cmt_reflow_mode                                   Number
#cmt_convert_tab_to_spaces                         { False, True }
cmt_indent_multi                = false
cmt_c_group                     = false
cmt_c_nl_start                  = false
cmt_c_nl_end                    = false
cmt_cpp_group                   = false
cmt_cpp_nl_start                = false
cmt_cpp_nl_end                  = false
cmt_cpp_to_c                    = false
cmt_star_cont                   = false
#cmt_sp_before_star_cont                           Number
#cmt_sp_after_star_cont                            Number
cmt_multi_check_last            = false
#cmt_multi_first_len_minimum                       Number
#cmt_insert_file_header                            String
#cmt_insert_file_footer                            String
#cmt_insert_func_header                            String
#cmt_insert_class_header                           String
#cmt_insert_oc_msg_header                          String
cmt_insert_before_preproc       = false
#cmt_insert_before_inlines                         { False, True }
#cmt_insert_before_ctor_dtor                       { False, True }
#pp_indent                                         { Ignore, Add, Remove, Force }
#pp_indent_at_level                                { False, True }
#pp_indent_count                                   Number
pp_space                        = ignore
#pp_space_count                                    Number
#pp_indent_region                                  Number
#pp_region_indent_code                             { False, True }
#pp_indent_if                                      Number
#pp_if_indent_code                                 { False, True }
#pp_define_at_level                                { False, True }
#use_indent_func_call_param                        { False, True }
#use_indent_continue_only_once                     { False, True }
use_options_overriding_for_qt_macros = false
warn_level_tabs_found_in_verbatim_string_literals = 1  # { 1, 2, 3 }
### -=- Below here is unstable (work-in-progress) -=-

# blocked by https://sourceforge.net/p/uncrustify/bugs/619/
# can be turned back on at any time
#mod_add_long_ifdef_else_comment=8
#mod_add_long_ifdef_endif_comment=8
mod_add_long_ifdef_else_comment = 0
mod_add_long_ifdef_endif_comment = 0



# Setting this 'false' will cause an extra tab to be added to function call args from an assignment:
# x = o.Func2(a, b,
# o.Func2(a, b,
# ...but setting it 'true' is often worse:
# ExtraReallyLongType reallyLongVariableName = someTest
#                                            ? someTrueExpr
#                                            : someFalseExpr
# ...except sometimes we really do want that. What we need is an indent_align_assign_threshold, or,
# better but maybe more complicated, indent_align_assign=ignore to leave alone what the engineer did.
# (currently unreported)
indent_align_assign             = false

# this is causing a few problems, but usually with block comments and autodoc markup. perhaps only add a space
# if first letter is not a symbol and this is a standalone comment: not preceded or followed by another c++
# comment line at the same level of indentation.
# REVISIT: work was done to have it eliminate space for doxygen markup in c6aca7b, maybe can improve on it for us
# (test using Runtime/Allocator/BucketAllocator.h)
# IMPORTANT: see task at https://trello.com/c/wUgiuvbX before going further
#sp_cmt_cpp_start=add
sp_cmt_cpp_start                = ignore

# https://sourceforge.net/p/uncrustify/bugs/619/
#sp_endif_cmt=force
sp_endif_cmt                    = ignore

# want to turn this on, but can't do it without also getting alignment right. try running it on this file as an example:
# Tools\BugReporterV2\qt_face\lib\src\MainWindow.cpp
#nl_cpp_ldef_brace=force
